git init 初始化git仓库    隐藏目录.git，这个不算工作区，而是Git的版本库。
git config --global user.email "you@example.com"		设置全局邮箱
git config --global user.name "Your Name"				设置全局名字
git status 	查看git仓库状态
git add 文件名   			告诉Git，把文件添加到仓库
git commit -m "更新消息"    告诉Git，把文件提交到仓库
git log 					命令显示从最近到最远的提交日志
git reset --hard 版本号		退回到指定版本 HEAD为当前版本  HEAD^ 为上一个版本  HEAD^^ 上上个版本  
git reflog 		用来记录你的每一次命令,可以查看版本号,退回指定版本

git diff HEAD -- 文件名    查看工作区和版本库里面最新版本的区别
git checkout -- 文件名		把文件在工作区的修改全部撤销
	这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态
	注意:git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
git reset HEAD <file>	可以把暂存区的修改撤销掉（unstage），重新放回工作区
	假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把stupid boss提交推送到远程版本库，你就真的惨了……

	总结：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

直接删除仓库中一个文件  rm <file>     Git知道你删除了文件，因此，工作区和版本库就不一致了
现在你有两个选择，
	一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- test.txt
git remote add origin git@github.com:michaelliao/learngit.git    设置远程仓库
git push -u origin master		把本地仓库同步到远程仓库,输入git用户名与密码
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


git clone git@github.com:michaelliao/gitskills.git   克隆一个远程仓库所有文件到本地

创建分支与合并分支
	git checkout -b dev   创建dev分支，并切换到dev分支上
	相当于如下2条命令
		git branch dev	   创建分支
		git checkout dev   切换分支
	git branch  查看当前分支 
	
	在dev分支上捣乱哈哈O(∩_∩)O哈哈~

git merge命令用于合并指定分支到当前分支。
如:git merge dev   将dev分支上的提交容到master分支上

git branch -d dev 删除分支

总结：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

git log --graph --pretty=oneline --abbrev-commit   用带参数的git log也可以看到分支的合并情况

小结
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
















